diff -c -r tcl8.4.0/generic/tclCompExpr.c tcl8.4.0-expr/generic/tclCompExpr.c
*** tcl8.4.0/generic/tclCompExpr.c	2002-08-06 13:46:58.000000000 -0400
--- tcl8.4.0-expr/generic/tclCompExpr.c	2002-11-27 11:24:52.000000000 -0500
***************
162
  			    ExprInfo *infoPtr, CompileEnv *envPtr,
  			    Tcl_Token **endPtrPtr));
  static int		CompileMathFuncCall _ANSI_ARGS_((
! 			    Tcl_Token *exprTokenPtr, CONST char *funcName,
  			    ExprInfo *infoPtr, CompileEnv *envPtr,
  			    Tcl_Token **endPtrPtr));
  static int		CompileSubExpr _ANSI_ARGS_((
--- 156,162 ----
  			    ExprInfo *infoPtr, CompileEnv *envPtr,
  			    Tcl_Token **endPtrPtr));
  static int		CompileMathFuncCall _ANSI_ARGS_((
! 			    Tcl_Token *exprTokenPtr, char *funcName,
  			    ExprInfo *infoPtr, CompileEnv *envPtr,
  			    Tcl_Token **endPtrPtr));
  static int		CompileSubExpr _ANSI_ARGS_((
***************
349
      Tcl_Token *tokenPtr, *endPtr, *afterSubexprPtr;
      OperatorDesc *opDescPtr;
      Tcl_HashEntry *hPtr;
!     CONST char *operator;
      Tcl_DString opBuf;
      int objIndex, opIndex, length, code;
      char buffer[TCL_UTF_MAX];
--- 343,349 ----
      Tcl_Token *tokenPtr, *endPtr, *afterSubexprPtr;
      OperatorDesc *opDescPtr;
      Tcl_HashEntry *hPtr;
!     char *operator;
      Tcl_DString opBuf;
      int objIndex, opIndex, length, code;
      char buffer[TCL_UTF_MAX];
***************
832
   *
   *----------------------------------------------------------------------
   */
- 
  static int
  CompileMathFuncCall(exprTokenPtr, funcName, infoPtr, envPtr, endPtrPtr)
      Tcl_Token *exprTokenPtr;	/* Points to TCL_TOKEN_SUB_EXPR token
  				 * containing the math function call. */
!     CONST char *funcName;	/* Name of the math function. */
      ExprInfo *infoPtr;		/* Describes the compilation state for the
  				 * expression being compiled. */
      CompileEnv *envPtr;		/* Holds resulting instructions. */
--- 821,831 ----
   *
   *----------------------------------------------------------------------
   */
  static int
  CompileMathFuncCall(exprTokenPtr, funcName, infoPtr, envPtr, endPtrPtr)
      Tcl_Token *exprTokenPtr;	/* Points to TCL_TOKEN_SUB_EXPR token
  				 * containing the math function call. */
!     char *funcName;	/* Name of the math function. */
      ExprInfo *infoPtr;		/* Describes the compilation state for the
  				 * expression being compiled. */
      CompileEnv *envPtr;		/* Holds resulting instructions. */
***************
842
  {
      Tcl_Interp *interp = infoPtr->interp;
      Interp *iPtr = (Interp *) interp;
!     MathFunc *mathFuncPtr;
      Tcl_HashEntry *hPtr;
      Tcl_Token *tokenPtr, *afterSubexprPtr;
      int code, i;
--- 835,841 ----
  {
      Tcl_Interp *interp = infoPtr->interp;
      Interp *iPtr = (Interp *) interp;
!     MathFunc *mathFuncPtr = NULL;
      Tcl_HashEntry *hPtr;
      Tcl_Token *tokenPtr, *afterSubexprPtr;
      int code, i;
***************
866
  
      code = TCL_OK;
      hPtr = Tcl_FindHashEntry(&iPtr->mathFuncTable, funcName);
!     if (hPtr == NULL) {
! 	Tcl_AppendStringsToObj(Tcl_GetObjResult(interp),
! 		"unknown math function \"", funcName, "\"", (char *) NULL);
! 	code = TCL_ERROR;
! 	goto done;
      }
-     mathFuncPtr = (MathFunc *) Tcl_GetHashValue(hPtr);
  
      /*
       * If not a builtin function, push an object with the function's name.
       */
  
!     if (mathFuncPtr->builtinFuncIndex < 0) {
! 	TclEmitPush(TclRegisterNewLiteral(envPtr, funcName, -1), envPtr);
      }
  
      /*
--- 846,862 ----
  
      code = TCL_OK;
      hPtr = Tcl_FindHashEntry(&iPtr->mathFuncTable, funcName);
!     if (hPtr != NULL) {
!       mathFuncPtr = (MathFunc *) Tcl_GetHashValue(hPtr);
      }
  
      /*
       * If not a builtin function, push an object with the function's name.
       */
  
!     if (hPtr == NULL || mathFuncPtr->builtinFuncIndex < 0) {
! 	TclEmitPush(TclRegisterLiteral(envPtr, funcName, -1, /* onHeap */ 0)
! 		, envPtr);
      }
  
      /*
***************
922
  
      tokenPtr = exprTokenPtr+2;
      afterSubexprPtr = exprTokenPtr + (exprTokenPtr->numComponents + 1);
!     if (mathFuncPtr->numArgs > 0) {
! 	for (i = 0;  i < mathFuncPtr->numArgs;  i++) {
! 	    if (tokenPtr == afterSubexprPtr) {
! 		Tcl_ResetResult(interp);
! 		Tcl_AppendToObj(Tcl_GetObjResult(interp),
! 		        "too few arguments for math function", -1);
! 		code = TCL_ERROR;
! 		goto done;
! 	    }
! 	    code = CompileSubExpr(tokenPtr, infoPtr, envPtr);
! 	    if (code != TCL_OK) {
! 		goto done;
! 	    }
! 	    tokenPtr += (tokenPtr->numComponents + 1);
  	}
! 	if (tokenPtr != afterSubexprPtr) {
! 	    Tcl_ResetResult(interp);
  	    Tcl_AppendToObj(Tcl_GetObjResult(interp),
! 		    "too many arguments for math function", -1);
! 	    code = TCL_ERROR;
! 	    goto done;
! 	} 
!     } else if (tokenPtr != afterSubexprPtr) {
! 	Tcl_ResetResult(interp);
! 	Tcl_AppendToObj(Tcl_GetObjResult(interp),
! 		"too many arguments for math function", -1);
  	code = TCL_ERROR;
  	goto done;
      }
!     
      /*
       * Compile the call on the math function. Note that the "objc" argument
       * count for non-builtin functions is incremented by 1 to include the
       * function name itself.
       */
  
!     if (mathFuncPtr->builtinFuncIndex >= 0) { /* a builtin function */
! 	/*
! 	 * Adjust the current stack depth by the number of arguments
! 	 * of the builtin function. This cannot be handled by the 
! 	 * TclEmitInstInt1 macro as the number of arguments is not
! 	 * passed as an operand.
! 	 */
! 
! 	if (envPtr->maxStackDepth < envPtr->currStackDepth) {
! 	    envPtr->maxStackDepth = envPtr->currStackDepth;
  	}
! 	TclEmitInstInt1(INST_CALL_BUILTIN_FUNC1,
  	        mathFuncPtr->builtinFuncIndex, envPtr);
  	envPtr->currStackDepth -= mathFuncPtr->numArgs;
      } else {
--- 865,904 ----
  
      tokenPtr = exprTokenPtr+2;
      afterSubexprPtr = exprTokenPtr + (exprTokenPtr->numComponents + 1);
!     for (i = 0; tokenPtr != afterSubexprPtr; i += 1) {
!         code = CompileSubExpr(tokenPtr, infoPtr, envPtr);
! 	if (code != TCL_OK) {
! 	    goto done;
  	}
! 	tokenPtr += (tokenPtr->numComponents + 1);
!     }
!     if (hPtr != NULL && mathFuncPtr->numArgs != i) {
!         Tcl_ResetResult(interp);
!         if (mathFuncPtr->numArgs < i) {
  	    Tcl_AppendToObj(Tcl_GetObjResult(interp),
! 			    "too many arguments for math function", -1);
! 	} else if (mathFuncPtr->numArgs > i) {
! 	    Tcl_AppendToObj(Tcl_GetObjResult(interp),
! 			    "too few arguments for math function", -1);
! 	}
  	code = TCL_ERROR;
  	goto done;
      }
! 
      /*
       * Compile the call on the math function. Note that the "objc" argument
       * count for non-builtin functions is incremented by 1 to include the
       * function name itself.
       */
  
!     if (hPtr == NULL) {
!         if (i+1 <= 255) {
! 	    TclEmitInstInt1(INST_INVOKE_STK1, i+1, envPtr);
! 	} else {
! 	    TclEmitInstInt4(INST_INVOKE_STK4, i+1, envPtr);
  	}
!     } else if (mathFuncPtr->builtinFuncIndex >= 0) { /* a builtin function */
! 	TclEmitInstInt1(INST_CALL_BUILTIN_FUNC1, 
  	        mathFuncPtr->builtinFuncIndex, envPtr);
  	envPtr->currStackDepth -= mathFuncPtr->numArgs;
      } else {
diff -c -r tcl8.4.0/generic/tclParseExpr.c tcl8.4.0-expr/generic/tclParseExpr.c
*** tcl8.4.0/generic/tclParseExpr.c	2002-08-06 13:46:58.000000000 -0400
--- tcl8.4.0-expr/generic/tclParseExpr.c	2002-11-27 11:43:54.000000000 -0500
***************
1363
  	
      case FUNC_NAME:
  	/*
! 	 * math_func '(' expr {',' expr} ')'
  	 */
  	
  	if (parsePtr->numTokens == parsePtr->tokensAvailable) {
--- 1357,1363 ----
  	
      case FUNC_NAME:
  	/*
! 	 * math_func { '(' expr {',' expr} ')' }
  	 */
  	
  	if (parsePtr->numTokens == parsePtr->tokensAvailable) {
***************
1439
  	tokenPtr->size = infoPtr->size;
  	tokenPtr->numComponents = 0;
  	parsePtr->numTokens++;
! 	
  	code = GetLexeme(infoPtr); /* skip over function name */
  	if (code != TCL_OK) {
  	    return code;
  	}
- 	if (infoPtr->lexeme != OPEN_PAREN) {
- 	    /*
- 	     * Guess what kind of error we have by trying to tell
- 	     * whether we have a function or variable name here.
- 	     * Alas, this makes the parser more tightly bound with the
- 	     * rest of the interpreter, but that is the only way to
- 	     * give a sensible message here.  Still, it is not too
- 	     * serious as this is only done when generating an error.
- 	     */
- 	    Interp *iPtr = (Interp *) infoPtr->parsePtr->interp;
- 	    Tcl_DString functionName;
- 	    Tcl_HashEntry *hPtr;
  
! 	    /*
! 	     * Look up the name as a function name.  We need a writable
! 	     * copy (DString) so we can terminate it with a NULL for
! 	     * the benefit of Tcl_FindHashEntry which operates on
! 	     * NULL-terminated string keys.
! 	     */
! 	    Tcl_DStringInit(&functionName);
! 	    hPtr = Tcl_FindHashEntry(&iPtr->mathFuncTable, 
! 	    	Tcl_DStringAppend(&functionName, tokenPtr->start,
! 		tokenPtr->size));
! 	    Tcl_DStringFree(&functionName);
! 
! 	    /*
! 	     * Assume that we have an attempted variable reference
! 	     * unless we've got a function name, as the set of
! 	     * potential function names is typically much smaller.
! 	     */
! 	    if (hPtr != NULL) {
! 		LogSyntaxError(infoPtr,
! 			"expected parenthesis enclosing function arguments");
! 	    } else {
! 		LogSyntaxError(infoPtr,
! 			"variable references require preceding $");
! 	    }
! 	    return TCL_ERROR;
! 	}
! 	code = GetLexeme(infoPtr); /* skip over '(' */
! 	if (code != TCL_OK) {
! 	    return code;
! 	}
  
! 	while (infoPtr->lexeme != CLOSE_PAREN) {
! 	    code = ParseCondExpr(infoPtr);
  	    if (code != TCL_OK) {
! 		return code;
  	    }
! 	    
! 	    if (infoPtr->lexeme == COMMA) {
! 		code = GetLexeme(infoPtr); /* skip over , */
  		if (code != TCL_OK) {
  		    return code;
  		}
! 	    } else if (infoPtr->lexeme != CLOSE_PAREN) {
! 		LogSyntaxError(infoPtr,
! 			"missing close parenthesis at end of function call");
! 		return TCL_ERROR;
  	    }
  	}
  
  	exprTokenPtr = &parsePtr->tokenPtr[exprIndex];
--- 1369,1420 ----
  	tokenPtr->size = infoPtr->size;
  	tokenPtr->numComponents = 0;
  	parsePtr->numTokens++;
! 
  	code = GetLexeme(infoPtr); /* skip over function name */
  	if (code != TCL_OK) {
  	    return code;
  	}
  
! 	if (infoPtr->lexeme == OPEN_PAREN) {
  
! 	    code = GetLexeme(infoPtr); /* skip over '(' */
  	    if (code != TCL_OK) {
! 	        return code;
  	    }
! 
! 	    while (infoPtr->lexeme != CLOSE_PAREN) {
! 	        code = ParseCondExpr(infoPtr);
  		if (code != TCL_OK) {
  		    return code;
  		}
! 	    
! 		if (infoPtr->lexeme == COMMA) {
! 		    code = GetLexeme(infoPtr); /* skip over , */
! 		    if (code != TCL_OK) {
! 		        return code;
! 		    }
! 		} else if (infoPtr->lexeme != CLOSE_PAREN) {
! 		    LogSyntaxError(infoPtr,
! 			    "missing close parenthesis at end of function call");
! 		    return TCL_ERROR;
! 		}
  	    }
+ 
+ 	} else {
+ 
+ 	    tokenPtr->type = TCL_TOKEN_VARIABLE; /* rewrite to var ref */
+ 	    tokenPtr->numComponents = 1;
+ 	    if (parsePtr->numTokens == parsePtr->tokensAvailable) {
+ 	        TclExpandTokenArray(parsePtr);
+ 	    }
+ 	    tokenPtr = &parsePtr->tokenPtr[parsePtr->numTokens];
+ 	    tokenPtr->type = TCL_TOKEN_TEXT;
+ 	    tokenPtr->start = tokenPtr[-1].start;
+ 	    tokenPtr->size = tokenPtr[-1].size;
+ 	    tokenPtr->numComponents = 0;
+ 	    parsePtr->numTokens++;
+ 
+ 	    infoPtr->next = tokenPtr->start+tokenPtr->size;
  	}
  
  	exprTokenPtr = &parsePtr->tokenPtr[exprIndex];
***************
1834
  		goto checkFuncName;
  	    }
  
- 	default:
  	checkFuncName:
! 	    length = (infoPtr->lastChar - src);
! 	    if (Tcl_UtfCharComplete(src, length)) {
! 		offset = Tcl_UtfToUniChar(src, &ch);
! 	    } else {
! 		char utfBytes[TCL_UTF_MAX];
! 		memcpy(utfBytes, src, (size_t) length);
! 		utfBytes[length] = '\0';
! 		offset = Tcl_UtfToUniChar(utfBytes, &ch);
! 	    }
! 	    c = UCHAR(ch);
! 	    if (isalpha(UCHAR(c))) {	/* INTL: ISO only. */
! 		infoPtr->lexeme = FUNC_NAME;
! 		while (isalnum(UCHAR(c)) || (c == '_')) { /* INTL: ISO only. */
! 		    src += offset; length -= offset;
! 		    if (Tcl_UtfCharComplete(src, length)) {
! 			offset = Tcl_UtfToUniChar(src, &ch);
! 		    } else {
! 			char utfBytes[TCL_UTF_MAX];
! 			memcpy(utfBytes, src, (size_t) length);
! 			utfBytes[length] = '\0';
! 			offset = Tcl_UtfToUniChar(utfBytes, &ch);
  		    }
! 		    c = UCHAR(ch);
  		}
! 		infoPtr->size = (src - infoPtr->start);
  		infoPtr->next = src;
  		parsePtr->term = infoPtr->next;
  		/*
--- 1783,1814 ----
  		goto checkFuncName;
  	    }
  
  	checkFuncName:
! 	default:
! 	    /*
! 	     * Parse FUNC_NAME using same rules as Tcl_ParseVarName()
! 	     * does for reading simple names, specifically, allow
! 	     * namespace :: delimiters.
! 	     */
! 	    while (src != infoPtr->lastChar) {
! 	        offset = Tcl_UtfToUniChar(src, &ch);
! 		c = UCHAR(ch);
! 		if (isalnum(c) || (c == '_')) { /* INTL: ISO only, UCHAR. */
! 		    src += offset;
! 		    continue;
! 		}
! 		if ((c == ':') && (((src+1) != infoPtr->lastChar) && (src[1] == ':'))) {
! 		    src += 2;
! 		    while ((src != infoPtr->lastChar) && (*src == ':')) {
! 		        src += 1;
  		    }
! 		    continue;
  		}
! 		break;
! 	    }
! 	    if ((src - infoPtr->start) > 0) {
! 		infoPtr->lexeme = FUNC_NAME;
! 	        infoPtr->size = (src - infoPtr->start);
  		infoPtr->next = src;
  		parsePtr->term = infoPtr->next;
  		/*
